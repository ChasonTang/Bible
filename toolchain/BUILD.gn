toolchain("clang") {
    # compiler tools
    depfile = "{{output}}.d"
    # all tools except "action"
    rspfile_name = "{{output}}.rsp"
    # all tools except "action" (required when "rspfile" is used)
    rspfile_compiler_content = "{{include_dirs}}"
    compiler_command = "-c {{source}} -o {{output}} -Wall -Wextra -Werror -Wpedantic -g -MMD -MF $depfile @$rspfile_name"
    if (is_debug) {
        compiler_command = string_join(" ", ["-fembed-bitcode-marker", compiler_command])
    } else {
        # NDEBUG for assert.h
        compiler_command = string_join(" ", ["-Os -flto -DNDEBUG", compiler_command])
    }
    if (code_coverage) {
        compiler_command = string_join(" ", ["-fprofile-instr-generate -fcoverage-mapping", compiler_command])
    }
    compiler_outputs = [
        "{{source_out_dir}}/{{source_name_part}}.o"
    ]
    linker_outputs = [
        "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    ]

    tool("cc") {
        rspfile = rspfile_name
        rspfile_content = rspfile_compiler_content
        # depsformat = "gcc"
        command = string_join(" ", ["clang", compiler_command])
        outputs = compiler_outputs
    }

    tool("cxx") {
        rspfile = rspfile_name
        rspfile_content = rspfile_compiler_content
        # 目前只用于单元测试，所以不考虑异常模型
        # 默认 C++98 + libc++ gtest 要求 C++11
        command = string_join(" ", ["clang++ -std=c++11", compiler_command])
        outputs = compiler_outputs
    }

    tool("stamp") {
        command = "touch {{output}}"
    }

    tool("link") {
        rspfile_content = "{{inputs}} {{frameworks}}"
        rspfile = rspfile_name
        # 目前只用于单元测试，可以关闭 -fembed-bitcode 并使用 clang++
        # /tmp/lto.o 丢失会导致 dsymutil 无法生成 dSYM
        # -Xlinker -object_path_lto -Xlinker {{output_dir}}/{{target_output_name}}_lto.o
        command = "clang++ -o {{output}} @$rspfile"
        if (code_coverage) {
            command = string_join(" ", [command, "-fprofile-instr-generate"])
        }
        default_output_dir = "{{root_out_dir}}"
        outputs = linker_outputs
    }

    tool("alink") {
        rspfile_content = "{{inputs}}"
        rspfile = rspfile_name
        command = "libtool -static -o {{output}} @$rspfile"
        default_output_dir = "{{target_out_dir}}"
        outputs = linker_outputs
        default_output_extension = ".a"
        output_prefix = "lib"
    }
}