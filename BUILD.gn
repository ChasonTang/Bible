config("napi") {
    include_dirs = [
        "include"
    ]
}

config("uthash") {
    include_dirs = [
        "third_party/uthash/src"
    ]
}

config("quickjs_config") {
    include_dirs = [
        "third_party/quickjs"
    ]
}

source_set("cutils") {
    public_configs = [":quickjs_config"]
    cflags_c = ["-Wno-sign-compare", "-Wno-unused-parameter"]
    sources = [
        "third_party/quickjs/cutils.c",
    ]
}

source_set("unicode") {
    public_configs = [":quickjs_config"]
    cflags_c = ["-Wno-sign-compare", "-Wno-unused-parameter"]
    sources = [
        "third_party/quickjs/libunicode.c"
    ]
    deps = [":cutils"]
}

source_set("regexp") {
    public_configs = [":quickjs_config"]
    cflags_c = ["-Wno-sign-compare", "-Wno-zero-length-array"]
    sources = [
        "third_party/quickjs/libregexp.c"
    ]
    deps = [":unicode", ":cutils"]
}

source_set("bf") {
    public_configs = [":quickjs_config"]
    cflags_c = ["-Wno-sign-compare", "-Wno-unused-parameter"]
    sources = [
        "third_party/quickjs/libbf.c"
    ]

    deps = [":cutils"]
}

config("quickjs_build_config") {
    cflags_c = ["-funsigned-char", "-Wno-unused-parameter", "-Wno-pedantic"]
}
# -------- hermes start ---------
# hermes config
config("hermes_external_include") {
    include_dirs = [
        "third_party/hermes/external/llvh/include",
        "third_party/hermes/external/llvh/gen/include"
    ]
}
# hermesAPI & jsi include
config("hermes_HermesAPI_include") {

    include_dirs = [
        "third_party/hermes/API/hermes",
    ]
}
config("hermes_jsi_include") {

    include_dirs = [
        "third_party/hermes/API/jsi"
    ]
}

config("hermes_public_API_include") {
    
    include_dirs = [
        "third_party/hermes/public",
        "third_party/hermes/API",
    ]
}

config("hermes_config_include") {
    
    include_dirs = [
        "third_party/hermes/config"
    ]
}

config("hermes_library_build_flags"){
    cflags = ["-Wno-sign-compare", "-Wno-unused-parameter", "-Wno-extra-semi", "-Wno-gnu-zero-variadic-macro-arguments", "-Wno-gnu-anonymous-struct", "-Wno-c99-extensions","-Wno-nested-anon-types"]
}

config("hermes_VM_define") {
   
    defines = [
        "HERMESVM_GC_HADES",
        "HERMESVM_INDIRECT_THREADING",
        "HERMESVM_ALLOW_COMPRESSED_POINTERS",
        "HERMESVM_HEAP_SEGMENT_SIZE_KB=4096",
        "HERMESVM_ALLOW_CONCURRENT_GC",
        "HERMES_ENABLE_DEBUGGER",
        "HERMES_LLVMHERMESVM_HEAP_SEGMENT_SIZE_KB=4096"
    ]
}

config("hermes_VM_include") {

    include_dirs = [
        "third_party/hermes/include",
    ]
}

# hermes jsi source
source_set("hermes_jsi_source") {
    public_configs = [
        ":hermes_jsi_include"
    ]
    sources = [
        "third_party/hermes/API/jsi/jsi/jsi.cpp"
    ]
}
# hermes debuggerAPI source
source_set("hermes_debuggerAPI_source") {
    public_configs = [
        ":hermes_VM_define",
        ":hermes_VM_include",
        ":hermes_jsi_include",
        ":hermes_HermesAPI_include",
        ":hermes_external_include",
        ":hermes_public_API_include",
        ":hermes_config_include",
        ":hermes_library_build_flags",
    ]
    sources = [
        "third_party/hermes/API/hermes/DebuggerAPI.cpp"
    ]
}

# hermes static library
source_set("hermes_library") {

    public_deps = [
        ":hermes_jsi_source",
        ":hermes_debuggerAPI_source"
    ]
    lib_dirs = ["build_hermes"]
    libs = [
        "build_hermes/libdtoa.a",
        "build_hermes/libLLVHSupport.a",
        "build_hermes/libLLVHDemangle.a",
        "build_hermes/libhermesFrontend.a",
        "build_hermes/libhermesOptimizer.a",
        "build_hermes/libhermesInst.a",
        "build_hermes/libhermesFrontEndDefs.a",
        "build_hermes/libhermesADT.a",
        "build_hermes/libhermesAST.a",
        "build_hermes/libhermesSourceMap.a",
        "build_hermes/libhermesSupport.a",
        "build_hermes/libhermesBackend.a",
        "build_hermes/libhermesParser.a",
        "build_hermes/libhermesHBCBackend.a",
        "build_hermes/libhermesRegex.a",
        "build_hermes/libhermesHBCBackend.a",
        "build_hermes/libhermesPlatform.a",
        "build_hermes/libhermesInternalBytecode.a",        
        "build_hermes/libhermesPlatformUnicode.a",
        "build_hermes/libhermesVMRuntime.a",
    ]
    cflags = [
        "-DNDEBUG"
    ]
    frameworks = [ "CoreFoundation.framework" ]
    sources = [
        "third_party/hermes/API/hermes/hermes.cpp"
    ]
}

# hermes&napi static library
static_library("napi_hermes") {

    configs = [
        ":uthash",
    ]
    public_configs = [
        ":napi",
    ]
    #(解决clion编译问题)-std=c++14 clion gn_to_cmake 的cxxflags 只会获取主动声明的 flags，toolchain中写好的flags并不会生效。
    cflags = ["-Wno-unused-variable","-Wno-unused-function","-std=c++14"]
    deps = [":hermes_library"]
    sources = [
        "src/js_native_api_hermes.cc"
    ]
}

executable("test_hermes") {
    testonly = true
    deps = [
        ":napi_hermes",
    ]
}


# -------- hermes end ---------

source_set("quickjs_source_set") {
    public_configs = [":quickjs_config", ":quickjs_build_config"]
    deps = [
        ":cutils",
        ":regexp",
        ":unicode"
    ]
    defines = ["CONFIG_VERSION=\"2021-03-27\""]
    cflags_c = ["-Wno-sign-compare"]
    if (big_number) {
        defines += ["CONFIG_BIGNUM"]
        deps += [":bf",]
    }
    if (build_android) {
        cflags_c += ["-Wno-unused-variable"]
    }

    sources = [
        "third_party/quickjs/quickjs.c",
    ]
}

if (build_android) {
    shared_library("quickjs") {
        public_configs = [":quickjs_config", ":quickjs_build_config"]
        deps = [":quickjs_source_set"]
    }
    shared_library("napi_qjs") {
        public_configs = [":napi"]
        sources = ["src/js_native_api_qjs.c", "src/js_native_api_common.c"]
        deps = [":quickjs"]
    }
} else if (build_ios) {
    static_library("quickjs") {
        public_configs = [":quickjs_config", ":quickjs_build_config"]
        deps = [":quickjs_source_set"]
    }
    static_library("napi_qjs") {
        public_configs = [
            ":napi",
        ]
        sources = [
            "src/js_native_api_qjs.c",
            "src/js_native_api_common.c"
        ]
        deps = [":quickjs"]
    }
    static_library("napi_jsc") {
        configs = [
            ":uthash"
        ]

        public_configs = [
            ":napi",
        ]

        frameworks = [ "JavaScriptCore.framework" ]

        sources = [
            "src/js_native_api_jsc.c",
            "src/js_native_api_common.c"
        ]
    }
} else {
    source_set("napi_qjs_source_set") {
        public_configs = [
            ":napi",
        ]
        sources = [
            "src/js_native_api_qjs.c",
            "src/js_native_api_common.c"
        ]
        deps = [":quickjs_source_set"]
    }
    source_set("napi_jsc_source_set") {
        configs = [
            ":uthash"
        ]

        public_configs = [
            ":napi",
        ]

        frameworks = [ "JavaScriptCore.framework" ]

        sources = [
            "src/js_native_api_jsc.c",
            "src/js_native_api_common.c"
        ]
    }
    source_set("test") {
        testonly = true
        include_dirs = [
            "test/include"
        ]
        configs = [":napi"]
        sources = [
            "test/js_native_api_test.cpp",
            "test/2_function_arguments.cpp",
            "test/3_callbacks.cpp",
            "test/4_object_factory.cpp",
            "test/5_function_factory.cpp",
            "test/test_array.cpp",
            "test/test_constructor.cpp",
            "test/test_conversions.cpp",
            "test/test_error.cpp",
            "test/test_exception.cpp",
            "test/test_function.cpp",
            "test/test_handle_scope.cpp",
            "test/test_new_target.cpp",
            "test/test_number.cpp",
            "test/test_string.cpp",
        ]
        deps = [
            ":gtest",
        ]
    }

    executable("test_jsc") {
        testonly = true
        deps = [
            ":test",
            ":napi_jsc_source_set"
        ]
    }

    executable("test_qjs") {
        testonly = true
        deps = [
            ":test",
            ":napi_qjs_source_set"
        ]
    }

    config("gtest_config") {
        include_dirs = [
            "third_party/googletest/googletest/include"
        ]
    }

    source_set("gtest") {
        testonly = true
        sources = [
            "third_party/googletest/googletest/src/gtest-death-test.cc",
            "third_party/googletest/googletest/src/gtest-filepath.cc",
            "third_party/googletest/googletest/src/gtest-matchers.cc",
            "third_party/googletest/googletest/src/gtest-port.cc",
            "third_party/googletest/googletest/src/gtest-printers.cc",
            "third_party/googletest/googletest/src/gtest-test-part.cc",
            "third_party/googletest/googletest/src/gtest-typed-test.cc",
            "third_party/googletest/googletest/src/gtest.cc",
        ]

        # Some files include "src/gtest-internal-inl.h".
        include_dirs = [ "third_party/googletest/googletest" ]

        public_configs = [ ":gtest_config" ]
    }

    source_set("gtest_main") {
        testonly = true
        sources = [ "third_party/googletest/googletest/src/gtest_main.cc" ]
        deps = [ ":gtest" ]

        public_configs = [
            ":gtest_config"
        ]
    }
}